<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans          
    http://www.springframework.org/schema/beans/spring-beans.xsd          
    http://www.springframework.org/schema/security          
    http://www.springframework.org/schema/security/spring-security.xsd">
    

    <!-- 1.无需权限的资源 -->
    <security:http pattern="/pages/login.jsp" security="none"/>
    <security:http pattern="/pages/failer.jsp" security="none"/>
    <security:http pattern="/css/**" security="none"/>
    <security:http pattern="/img/**" security="none"/>
    <security:http pattern="/plugins/**" security="none"/>
    
    <!-- 
		 2.配置具体的规则 
	    	auto-config="true"	无自定义页面，则框架提供默认登录页面
	    	use-expressions="false"	是否使用SPEL表达式	 -->
    <security:http auto-config="true" use-expressions="true">
    	<!-- 1.配置具体的拦截的规则 pattern="/**"表示所有路径  access="访问系统的人，必须有ROLE_USER 或 ROLE_ADMIN的角色" -->
    	<security:intercept-url pattern="/**" access="hasAnyRole('ROLE_USER','ROLE_ADMIN')"/>
    	
    	<!-- 2.定义跳转的具体的页面 
	    	login-page 					自定义登陆页面 
			login-processing-url：		登入处理请求，跳转后台校验权限，登陆页面的action
			default-target-url 			登陆成功后跳转的页面，
			authentication-failure-url 	用户权限校验失败页面。 
			注：登陆页面用户名固定 username，密码 password，action:login -->
    	<security:form-login  
    		login-page="/pages/login.jsp"
    		login-processing-url="/login"
    		default-target-url="/index.jsp"
    		authentication-failure-url="/pages/failer.jsp" />
    	
    	<!-- 3.退出 
    		invalidate-session：	是否删除session 
			logout-url：			登出处理链接 
			logout-success-url：	登出成功页面 
			注：登出操作 只需要链接到 logout即可登出当前用户 -->
    	<security:logout invalidate-session="true" logout-url="/logout" logout-success-url="/pages/login.jsp" />
    	
    	<!-- 4.关闭跨域请求 -->
    	<security:csrf disabled="true"/>
    	
    </security:http>
    
    <!-- 3.绑定校验程序  已实现的 UserDetailsService 类-->
    <security:authentication-manager>
    	<security:authentication-provider user-service-ref="userService">
    		<!-- 配置加密的方式，加密 表单提交的密码  	若数据库中密码为原始密码，则不要配置此加密方式 -->
    		<security:password-encoder ref="passwordEncoder"/>
    		
    	</security:authentication-provider>
    </security:authentication-manager>
    
    <!--  .配置加密类 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>
    
    
    <!-- 4.开启 方法级权限控制注解 	三种注解：JSR-250注解、@Secured注解、支持表达式的注解
    		若 权限注解 写在 Controller中，将这条配置移到 spring-mvc.xml中，且需要 spring-mvc.xml引入 security约束，
    		否则 权限注解 无效-->
    <security:global-method-security jsr250-annotations="enabled" secured-annotations="enabled" pre-post-annotations="enabled"></security:global-method-security>
    
    
    <!-- 开启SPEL表达式的解析 
    <bean id="webexpressionHandler" class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" />
    -->
    
    <!-- 5.提供了入门的方式，在内存中存入用户名和密码 
    <security:authentication-manager>
    	<security:authentication-provider>
    		<security:user-service>
    			<security:user name="admin" password="{noop}admin" authorities="ROLE_USER"/>	若不加{noop}会报500错误
    		</security:user-service>
    	</security:authentication-provider>
    </security:authentication-manager>
    -->
    
 </beans>   
 
 
 
 
 
 
 
 
 
 
 
 
 